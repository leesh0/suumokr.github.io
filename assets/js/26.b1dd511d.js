(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{516:function(t,s,a){"use strict";a.r(s);var n=a(37),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"ブログ始めました。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ブログ始めました。"}},[t._v("#")]),t._v(" ブログ始めました。")]),t._v(" "),a("p",[t._v("最近、勉強した内容を記録する必要性を感じたので勉強した内容を記録するブログを作りました。")]),t._v(" "),a("p",[t._v("使ったツール・framework")]),t._v(" "),a("ul",[a("li",[t._v("Vuepress")]),t._v(" "),a("li",[t._v("tailwindcss")]),t._v(" "),a("li",[t._v("github action")]),t._v(" "),a("li",[t._v("vs code material icons")])]),t._v(" "),a("h2",{attrs:{id:"工夫した点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工夫した点"}},[t._v("#")]),t._v(" 工夫した点")]),t._v(" "),a("h3",{attrs:{id:"作成日自動化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作成日自動化"}},[t._v("#")]),t._v(" ==作成日自動化==")]),t._v(" "),a("p",[t._v("まず、一般的な静的サイトの場合Markdownのfrontmatterでdateを書くかファイル名に日にちを書いて作成日を表示することが多い。")]),t._v(" "),a("p",[t._v("でもこの方式だと毎回ファイル名をformatに合わせて書かないといけなくなってめんどくさいと思ったので自動に日付を生成する機能を入れた。")]),t._v(" "),a("p",[t._v("データベースを使わず"),a("code",[t._v("git log")]),t._v("を使って最初の作成日がわかることを"),a("a",{attrs:{href:"https://github.com/vuejs/vuepress/blob/master/packages/%40vuepress/plugin-last-updated/index.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("@vuepress/plugin-last-updated"),a("OutboundLink")],1),t._v("のコードを見て気づいて"),a("code",[t._v("getGitCreatedTimeStamp")]),t._v("を作った。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getGitCreatedTimeStamp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("filePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastUpdated\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" gitLog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" spawn\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'log'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--reverse'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--oneline'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--no-merges'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--format=%at'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("basename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          cwd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    lastUpdated "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gitLog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do not handle for now */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lastUpdated\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("実は"),a("code",[t._v("git log -1")]),t._v("みたいに-1をparamに追加すると一行でsplitをする必要はなくなるけどなぜか求めた結果と違う結果が出て今回はsplitで一番最初にcommitしたtimestampを持ってくるようにしてみた。")]),t._v(" "),a("h3",{attrs:{id:"テーマ"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#テーマ"}},[t._v("#")]),t._v(" ==テーマ==")]),t._v(" "),a("p",[t._v("vuepressもcommunityで開発したthemeは多いけどカスタムが難しいとかこのテーマを使う人が多すぎるとかの理由で自分のテーマを作りたいと思って"),a("code",[t._v("tailwindcss")]),t._v("を用いてデザインしてみた。あまりデザインに自信はないけど頑張りました。それとthumbnailに使うアイコンなどはvs-codeのmaterialテーマで使っているファイルアイコンを使うようにしてみた。")]),t._v(" "),a("p",[a("strong",[t._v("Directory Structure")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("theme\n├── assets\n│   └── data\n│       ├── devicon.json\n│       ├── gitmojis.json\n│       └── icons.js\n├── enhanceApp.js\n├── global-components\n│   ├── authorCard.vue\n│   ├── foot.vue\n│   ├── hometab.vue\n│   ├── infocard.vue\n│   ├── navbar.vue\n│   ├── postCard.vue\n│   ├── postInfo.vue\n│   ├── postList.vue\n│   ├── seriesCard.vue\n│   ├── seriesInfo.vue\n│   ├── seriesList.vue\n│   ├── tagCard.vue\n│   ├── tagInfo.vue\n│   ├── tagsList.vue\n│   ├── tilList.vue\n│   ├── toc.vue\n│   └── utterances.vue\n├── index.js\n├── layouts\n│   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v(".vue\n│   ├── IndexPost.vue\n│   ├── Layout.vue\n│   ├── Post.vue\n│   ├── Series.vue\n│   └── Tags.vue\n├── plugins\n│   └── page.js\n└── styles\n    ├── palette.styl\n    └── vscode.css\n")])])]),a("h3",{attrs:{id:"デプロイ"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#デプロイ"}},[t._v("#")]),t._v(" ==デプロイ==")]),t._v(" "),a("p",[t._v("今回初めてgithubのactions機能を使ってみた。blogをgithub pagesで運用するつもりだったけどgithub pagesは静的なファイルしか使えないからvuepressをbuildしてbuildされたファイルを他のbranchにpushする必要性を感じて記事を書くたびにこのprocessを繰り返すことは無理だと思ったのでactionsを通じてファイルをpushするだけで自動にbuildしてpushしてくれるようにしてみた。")]),t._v(" "),a("p",[t._v("ここで、actionsのcheckoutのoptionを何もセットしてなかったからgit logを使ってもdeployした時間しか出てこない問題が発生して"),a("code",[t._v("fetch-depth:0")]),t._v("optionを追加してgitのhistoryまで持ってくるようにして==作成日==自動化の問題を解決した。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build & deploy\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build-and-deploy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" checkout\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v2\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fetch-depth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Install and Build\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n          yarn && yarn docs:build")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Deploy Build Files\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You should enroll ACEESS_TOKEN to repository's secret")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ACCESS_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secrets.ACCESS_TOKEN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n          cd .vuepress/dist\n          git config --global user.email "notedev.jp@gmail.com"\n          git config --global user.name "suumokr"\n          git init\n          git add -A\n          git commit -m \'deploy with vuepress\'\n          git push -f https://${ACCESS_TOKEN}@github.com/${GITHUB_REPOSITORY}.git master:gh-pages')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"repo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repo"}},[t._v("#")]),t._v(" Repo")]),t._v(" "),a("p",[t._v("https://github.com/suumokr/suumokr.github.io")])])}),[],!1,null,null,null);s.default=e.exports}}]);